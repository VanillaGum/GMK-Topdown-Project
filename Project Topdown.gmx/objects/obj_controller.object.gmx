<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-9999990</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
global.last_char = noone;
global.db_click=false;
global.bush=0;
global.wood=15;
global.food=5;
global.machine=2;
global.toilet=1;
global.gate=3;
global.autogate=1;
global.build=false;
global.picked="";
global.str="";
global.text_input=false;
global.current_tab = "";
global.player_gold = 250;
global.menu_opened=false;
global.target=noone;
global.actor=noone;
global.ident=noone;
n=0;

/*
repeat(room_width*4)
{
tile = tile_layer_find(1400,(irandom(room_width) div 32) * 32, (irandom(room_height) div 32) * 32);
if tile_exists(tile)
{
index = tile_get_background(tile);
if index == bck_mud
{
tile_set_background(tile,choose(bck_mud,bck_mud1));
}
}
}
*/

for (var i=0; i&lt;room_width; i+=32) {
  for (var j=0; j&lt;room_height; j+=32) {
tile = tile_layer_find(1400,i, j);
if tile_exists(tile)
{
index = tile_get_background(tile);
if index == bck_mud
{
tile_set_background(tile,choose(bck_mud,bck_mud1,bck_mud2));
}
}
  
  }
}

//price array
global.price[0]=16;        //bush
global.price[1]=6;        //fence
global.price[2]=450;     //toilet
global.price[3]=1500;   //machine
global.price[4]=4;     //food
global.price[5]=32;   //gate
global.price[6]=120; //autogate

rect=false;
old_x=0;
old_y=0;
dbl=0;
db_timer=0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///double click

//mouse click init
    if mouse_check_button_pressed(mb_left)
    {
    dbl ++;
    db_timer = room_speed/2;
    }
//decreasing timer
    if db_timer&gt;0
    {
    db_timer--;
    }
//resetting double click
    if db_timer&lt;=0
    {
    dbl=0;
    global.db_click = false;
    }
//confirming double click
    if dbl&gt;0 
    {
    global.db_click = true;
    dbl=0;
    }
    
//spawning flowers
var rand_x = (random(room_width)  div 32) * 32 + 16;
var rand_y = (random(room_height) div 32) * 32 + 16;

if (position_empty(rand_x,rand_y)) &amp;&amp; (instance_number(obj_flower)&lt;7) &amp;&amp; (irandom(9999)==666) &amp;&amp; global.menu_opened == false
{
instance_create(rand_x,rand_y,obj_flower);
}


    
//view follow mouse
var view_speed=10;
if (global.current_tab!="buy" &amp;&amp; global.current_tab!="sell")
{
if mouse_x &gt; view_xview[0]+view_wview[0]-32 &amp;&amp; (view_xview[0] &lt; room_width-view_wview[0]-8) {view_xview[0]+=view_speed;}
if mouse_x &lt; view_xview[0]+32 &amp;&amp; (view_xview[0] &gt; 0) {view_xview[0]-=view_speed;}
if mouse_y &gt; view_yview[0]+view_hview[0]-32 &amp;&amp; (view_yview[0] &lt; room_height-view_hview[0]-8) {view_yview[0]+=view_speed;}
if mouse_y &lt; view_yview[0]+32 &amp;&amp; (view_yview[0] &gt; 0) {view_yview[0]-=view_speed;}
}

//spawn wild monsters
if irandom(4000) == 3 &amp;&amp; (global.current_tab!="buy" &amp;&amp; global.current_tab!="sell")
{

my_x = (irandom(room_width) div 32) * 32 + 16;
my_y = choose(0,room_height-16,350,360); 

if (my_y == 0) || (my_y == room_height-16)
{
if position_empty(my_x,my_y)
{
new_monster = instance_create(my_x,my_y,obj_char01);
new_monster.wild_level = 100;
new_monster.level=irandom_range(25,45);
scale = random_range(0.7,1);
new_monster.image_xscale=scale;
new_monster.image_yscale=scale;
with(new_monster){scr_run_free();}
}
}
else 
{
my_x = choose(16,room_width-16)
my_y = (irandom(room_height)  div 32) * 32 + 16;
if position_empty(my_x,my_y)
{
new_monster = instance_create(my_x,my_y,obj_char01);
new_monster.wild_level = 100;
new_monster.level=irandom_range(25,45);
scale = random_range(0.7,1);
new_monster.image_xscale=scale;
new_monster.image_yscale=scale;
with(new_monster){scr_run_free();}
}
}
}

if global.build==true &amp;&amp; global.picked==""
{
global.build=false;
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>game_end();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="17">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>game_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="61">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>view_wview[0]=960*2;
view_hview[0]=540*2;
view_xview[0]=mouse_x-view_wview[0]/2;
view_yview[0]=mouse_y-view_hview[0]/2;
window_mouse_set(window_get_width()/2,window_get_height()/2);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="60">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>view_wview[0]=960;
view_hview[0]=540;
view_xview[0]=mouse_x-view_wview[0]/2;
view_yview[0]=mouse_y-view_hview[0]/2;
window_mouse_set(window_get_width()/2,window_get_height()/2);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="54">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.current_tab=="build"
{
tile_layer_delete_at(1400,mouse_x,mouse_y);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.build==true &amp;&amp; position_empty(mouse_x,mouse_y)
{

//tiles
al_x = (mouse_x div 32)*32;
al_y = (mouse_y div 32)*32;


switch(global.picked)
{
case "fence":
if global.wood&gt;0
{
obj = instance_create(mouse_x-16,mouse_y-16,obj_fence);
with(obj){move_snap(32,32);}
global.wood--;
}
break;

case "bush":
if global.bush&gt;0
{
obj = instance_create(mouse_x-16,mouse_y-16,obj_wall);
with(obj){move_snap(32,32);}
global.bush--;
}
break;

case "food":
if global.food&gt;0
{
obj = instance_create(mouse_x-16,mouse_y-16,obj_food);
with(obj){move_snap(32,32);}
global.food--;
}
break;

case "machine":
if global.machine&gt;0
{
obj = instance_create(mouse_x-32,mouse_y-32,obj_machine);
with(obj){move_snap(32,32);}
global.machine--;
}
break;

case "toilet":
if global.toilet&gt;0
{
obj = instance_create(mouse_x-16,mouse_y-16,obj_toilet);
with(obj){move_snap(32,32);}
global.toilet--;
}
break;

case "gate":
if global.gate&gt;0
{
obj = instance_create(mouse_x-16,mouse_y-16,obj_gate);
mp_grid_add_instances(global.grid, obj, false);
with(obj){move_snap(32,32);}
global.gate--;
}
break;

case "autogate":
if global.autogate&gt;0
{
obj = instance_create(mouse_x-16,mouse_y-16,obj_auto_gate);
mp_grid_add_instances(global.grid, obj, false);
with(obj){move_snap(32,32);}
global.autogate--;
}
break;

case "street":
tile_add(bck_street,0,0,32,32,al_x,al_y,1400);
break;

case "mud":
tile_add(bck_mud,0,0,32,32,al_x,al_y,1400);
break;

case "stone":
tile_add(bck_stone,0,0,32,32,al_x,al_y,1400);
break;

case "street2":
tile_add(bck_street2,0,0,32,32,al_x,al_y,1400);
break;

}

// Add new obstacles
mp_grid_add_instances(global.grid, obj_wall, false);
mp_grid_add_instances(global.grid, obj_fence, false);


}




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>enum states
{
normal,
need_to_go,
sick,
angry,
menu,
social,
sleeping, 
sex,
}

window_set_cursor(cr_none);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_color(c_white);

if global.build==true
{


//cursor sprite
switch(global.picked)
{

case "fence":
draw_sprite(spr_fence,0,mouse_x-16,mouse_y-16);
break;

case "bush":
draw_sprite(spr_bush,0,mouse_x-16,mouse_y-16);
break;

case "food":
draw_sprite(spr_food,0,mouse_x-16,mouse_y-16);
break;

case "machine":
draw_sprite(spr_machine,0,mouse_x-32,mouse_y-32);
break;

case "gate":
draw_sprite(spr_gate,0,mouse_x-16,mouse_y-16);
break;

case "autogate":
draw_sprite(spr_auto_gate,0,mouse_x-16,mouse_y-16);
break;

case "toilet":
draw_sprite(spr_toilet,0,mouse_x-16,mouse_y-16);
break;

case "street":
draw_sprite(spr_street,0,mouse_x-16,mouse_y-16);
break;

case "street2":
draw_sprite(spr_street2,0,mouse_x-16,mouse_y-16);
break;

case "mud":
draw_sprite(spr_mud,0,mouse_x-16,mouse_y-16);
break;

case "stone":
draw_sprite(spr_stone,0,mouse_x-16,mouse_y-16);
break;

}

}







//text input (Name)
if global.text_input==true &amp;&amp; (global.menu_opened==false || instance_exists(obj_ring_menu))
{
draw_set_font(fnt_main);
draw_set_color(make_colour_rgb(108, 48, 16));
draw_text((view_xview[0]+view_wview[0]/2),(view_yview[0]+view_hview[0]/2)-48,"Name:")
draw_set_color(make_colour_rgb(131, 52, 9));
draw_rectangle_color((view_xview[0]+view_wview/2)-68, (view_yview+view_hview/2)-36, ((view_xview+view_wview/2)+68),view_yview+view_hview/2+4,make_colour_rgb(240, 96, 17),0,0,make_colour_rgb(140, 60, 16),0);
draw_set_color(make_colour_rgb(93, 45, 19));
draw_rectangle((view_xview[0]+view_wview/2)-64, (view_yview+view_hview/2)-32, ((view_xview+view_wview/2)+64),view_yview+view_hview/2,0);
draw_set_color(make_colour_rgb(214, 95, 29));
draw_set_halign(fa_center);
draw_set_valign(fa_center);
if keyboard_string != "" 
{
draw_set_halign(fa_center);
draw_set_valign(fa_center);
draw_text(view_xview[0]+view_wview[0]/2,view_yview[0]+view_hview[0]/2-16,keyboard_string);
}
else {draw_text(view_xview[0]+view_wview/2,view_yview[0]+(view_hview/2)-16,"---");}
if string_length(keyboard_string) &gt; 12
   {
   keyboard_string = string_copy(keyboard_string, 1, 12);
   }
}





draw_text(view_xview[0]+64,view_yview[0]+128,"target: "+string(global.ident));
draw_text(view_xview[0]+64,view_yview[0]+160,"actor: "+string(global.actor));
draw_text(view_xview[0]+64,view_yview[0]+192,"number: "+string(n));
draw_text(view_xview[0]+64,view_yview[0]+224,"instance number: "+string(instance_number(obj_char01)));



if mouse_check_button(mb_left)
{
draw_rectangle(old_x,old_y,mouse_x,mouse_y,1);
rect = true;
}
else
{
old_x = mouse_x;
old_y = mouse_y;
rect=false;
}

draw_sprite(spr_cursor,0,mouse_x,mouse_y);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

//draw the grid
if global.build==true &amp;&amp; global.menu_opened==false &amp;&amp; global.picked!=""
{
draw_sprite(spr_grid,0,0,0);
draw_sprite(spr_grid,0,1024,0);
draw_sprite(spr_grid,0,2048,0);
draw_sprite(spr_grid,0,3072,0);

draw_sprite(spr_grid,0,0,1024);
draw_sprite(spr_grid,0,1024,1024);
draw_sprite(spr_grid,0,2048,1024);
draw_sprite(spr_grid,0,3072,1024);

draw_sprite(spr_grid,0,0,2048);
draw_sprite(spr_grid,0,1024,2048);
draw_sprite(spr_grid,0,2048,2048);
draw_sprite(spr_grid,0,3072,2048);

draw_sprite(spr_grid,0,0,3072);
draw_sprite(spr_grid,0,1024,3072);
draw_sprite(spr_grid,0,2048,3072);
draw_sprite(spr_grid,0,3072,3072);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="81">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if n &gt; instance_number(obj_char01)-2
{
n=0;
}
else
{
n++;
}

monster_pos = instance_find(obj_char01,n);
view_xview[0]=monster_pos.x-view_wview[0]/2;
view_yview[0]=monster_pos.y-view_hview[0]/2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="69">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if view_visible[1]==true
{
view_visible[1]=false;
}
else 
{
view_visible[1]=true;

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_number(obj_menu_main)==0 &amp;&amp; global.text_input==false
{

if instance_exists(obj_ring_menu){with(obj_ring_menu){instance_destroy();}}

global.current_tab="buy";
global.text_input=false;
my_x=view_xview[0]+(view_wview[0]/2);
my_y=view_yview[0]+(view_hview[0]/2);
instance_create(my_x,my_y,obj_menu_main);
global.menu_opened = true;
global.build=false;
with(obj_ring_menu){instance_destroy();}
with(obj_button_name){instance_destroy();}

instance_deactivate_object(obj_char01);
}
else
{
with(obj_menu_main){instance_destroy();}
with(obj_tab_buy){instance_destroy();}
with(obj_tab_sell){instance_destroy();}
with(obj_tab_build){instance_destroy();}
with(obj_field_buy){instance_destroy();}
with(obj_field_sell){instance_destroy();}
with(obj_field_build){instance_destroy();}
global.current_tab="";
global.menu_opened = false;
instance_activate_object(obj_char01);
keyboard_string="";
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
