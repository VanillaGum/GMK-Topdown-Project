<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_race01</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create the path
path = path_add();

selected = false;
level=irandom_range(28,34);
alarm[0]=room_speed;

//monster style
my_race = irandom_range(1,5);

switch(my_race)
{
case 1:
scr_get_sprite_char01();
break;

case 2:
sprite_index=spr_race02;
break;

case 3:
sprite_index=spr_race03;
break;

case 4:
sprite_index=spr_race04;
break;

case 5:
sprite_index=spr_race05;
break;
}
scr_get_color();

//

grown=true;
sex_timer=0;
dump_timer=0;
need_to_go=false;
find_alarm=0;
munching=false;
escape=0;
numby=0;
act=false;
option="";
target=noone;
social_timer=0;


wild_level = 0;

state=states.normal;

//monster stats
my_health=100;
my_speed=4;
my_feeling=0; //0 = healthy; 1 = sad; 2 = sick;
my_hunger=0;
my_sex=irandom(1); //0 = female; 1 = male;
my_parents="";
my_charm=irandom(2);

if my_sex == 0 {scr_random_name_female();}
else {scr_random_name_male();}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if state==states.normal
{
my_speed=choose(1,2,3,4);
alarm[0]=room_speed*5;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//states
switch(state)
{

case states.normal:
scr_monster_normal();
break;

case states.need_to_go:
scr_monster_toilet();
break;

case states.angry:
scr_monster_angry();
break;

case states.social:
scr_monster_social();
break;

case states.sleeping:
scr_sleeping();
break;

case states.sex:
scr_sex();
break;

}

image_angle=direction;

//selecting multiple chars
var xx = obj_controller.old_x;
var yy = obj_controller.old_y;
var rect1 = (point_in_rectangle(x, y, min(xx, mouse_x), min(yy, mouse_y), max(xx, mouse_x), max(yy, mouse_y))) &amp;&amp; obj_controller.rect==true

   if (rect1) &amp;&amp; mouse_check_button_released(mb_left)
   {
   selected=true;
   path_end();
   }
   
//colliding
if place_meeting(round(x),round(y),obj_char01) 
{


move_contact_all(direction,12);

}

   
//depth
if (selected) {depth=-999999} else {depth=0}


//dead
if my_health&lt;=0
{
path_end();
instance_change(obj_char01dead,0);
image_angle=0;
}

//assigning feelings #demfeels
surrounded = collision_line(x,y,x,y-64,obj_wall,0,0) &amp;&amp; collision_line(x,y,x,y+64,obj_wall,0,0)  &amp;&amp; collision_line(x,y,x-64,y,obj_wall,0,0) &amp;&amp; collision_line(x,y,x+64,y,obj_wall,0,0) 

if (my_health&lt;80) || (sick) || surrounded || my_hunger &gt; 50
{
my_feeling=1;
}
else
{
my_feeling=0;
}

//assigning name
if (global.text_input==true) &amp;&amp; (keyboard_check_pressed(vk_enter)) &amp;&amp; (selected)
{
my_name = string(keyboard_string);
keyboard_string="";
global.text_input=false;
}



//growing
if image_xscale &lt;1 &amp;&amp; image_yscale &lt;1
{
image_xscale+=0.00001;
image_yscale+=0.00001;
}
else
{grown=true;}
if level&lt;25
{if irandom(999)==3
{
level++;
wild_level--;
instance_create(x,y,obj_lvlup_icon);
}
}

//cheats
switch(my_name)
{
case "240":
room_speed=240;
break;

case "60":
room_speed=60;
break;

case "fuck":
state=states.angry;
break;
}


if wild_level&lt;0
{wild_level=0;}
//decreasing wilderness level
condition_1 = wild_level&gt;0 &amp;&amp; (surrounded) &amp;&amp; irandom(20000)==666;
condition_2 = wild_level&gt;0 &amp;&amp; place_meeting(x,y,obj_char01) &amp;&amp; irandom(6000)==666;
condition_3 = wild_level&gt;0 &amp;&amp; wild_level&lt;70 &amp;&amp; irandom(100000)==666;
condition_4 = wild_level&gt;0 &amp;&amp; wild_level==level;
condition_5 = wild_level&gt;0 &amp;&amp; (x&lt;(room_width/2)+160) &amp;&amp; (x&gt;(room_width/2)-160) &amp;&amp; (y&lt;(room_height/2)+160) &amp;&amp; (y&gt;(room_height/2)-16) &amp;&amp; irandom(10000)==666;

if (condition_1) || (condition_2) || (condition_3) || (condition_4) || condition_5
{
wild_level--;
}

//social moves
if option != "" &amp;&amp; target!=noone &amp;&amp; option!="sex"
{
state=states.social;
}

if (instance_exists(obj_ring_menu))
{
if (selected==true) &amp;&amp; (act==true) &amp;&amp; mouse_check_button_pressed(mb_left) &amp;&amp; (obj_ring_menu.cell_6==true)
{
act=false;
selected=false;
option="";
state=states.normal;
target=noone;
social_timer=0;
} 
}

if social_timer&lt;0
{
act=false;
selected=false;
option="";
state=states.normal;
target=noone;
social_timer=0;
}

if place_meeting(x,y,obj_water) &amp;&amp; (!place_meeting(x,y,obj_water_border))
{
image_alpha=0.5;
}
else
{
image_alpha=1
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_machine">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>path_end();
instance_change(obj_char01dead,0);
image_angle=0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_toilet">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if state == states.need_to_go &amp;&amp; need_to_go == true
{
repeat(irandom_range(1,4))
{
instance_create(x+irandom_range(-8,8),y+irandom_range(-8,8),obj_dump);
}
need_to_go=false;
dump_timer=0;
state=states.normal;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_flower">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (irandom(6) == 3) &amp;&amp; my_hunger &gt; 0 &amp;&amp; other.image_xscale&gt;=1 &amp;&amp; other.image_yscale&gt;=1 
{
if irandom(222)&lt;2
{
level+=1;
wild_level--;
instance_create(x,y,obj_lvlup_icon);
}
my_hunger-=level/20;
my_health+=level/30;
other.state+=.1;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_food">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (irandom(6) == 3) &amp;&amp; (my_hunger &gt; 0 || my_health&lt;100)
{
if irandom(222)&lt;2
{
level+=1;
wild_level--;
instance_create(x,y,obj_lvlup_icon);
}
my_hunger-=level/20;
my_health+=level/30;
other.state+=.1;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_water">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if irandom(40)==2 &amp;&amp; (x&lt;room_width-16) &amp;&amp; (x&gt;16) &amp;&amp; (y&lt;room_height-16) &amp;&amp; (y&gt;16) &amp;&amp; (!place_meeting(x,y,obj_water_border))
{
amount=0.4;
path_end();
x+=choose(-amount,amount,0);
y+=choose(-amount,amount,0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="54">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (selected)
{selected=false;}

global.build=false;
global.text_input=false;
global.picked="";
keyboard_string="";

/*
act=false;
option="";
target=noone;
global.actor=noone;
global.ident=noone;
social_timer=0;
*/

with(obj_ring_menu){instance_destroy();}
with(obj_button_name){instance_destroy();}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if global.db_click == true &amp;&amp; global.build==false &amp;&amp; state!=states.angry &amp;&amp; irandom(wild_level*2)==0 &amp;&amp; option!="follow" &amp;&amp; state!=states.sleeping
{
effect_create_below(ef_spark,mouse_x+random_range(-4,4),mouse_y+random_range(-4,4),1,c_white);
scr_move_to_cursor();

with(obj_ring_menu){instance_destroy();}
with(obj_button_name){instance_destroy();}

act=false;
option="";
target=noone;
global.actor=noone;
global.ident=noone;
social_timer=0;

}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.build==false &amp;&amp; wild_level&lt;50
{

with(obj_char01)
{selected=false; act=false;}
selected=true;

global.actor=id;
act=true;

if !instance_exists(obj_ring_menu)
{
instance_create(x,y,obj_ring_menu);
}

if !instance_exists(obj_button_name)
{
instance_create(x,y,obj_button_name);
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.build==false
{

with(obj_char01)
{selected=false;}
if global.actor == noone {selected=true;}

if global.actor!=id
{
global.ident=id;
with(global.actor)
{

switch(option)
{
case "like":
social_timer=15;
break;

case "greet":
social_timer=15;
break;

case "play":
social_timer=room_speed*2;
break;

case "nag":
social_timer=15;
break;

case "follow":
social_timer=15;
break;

case "sex":
social_timer=5;
global.actor.state=states.sex;
break;

case "abort":
social_timer=15;
break;
}
target=global.ident; 

}
global.ident=noone; 
global.actor=noone;
with(obj_ring_menu){instance_destroy();}
with(obj_button_name){instance_destroy();}
}



}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>outline_col = make_colour_rgb(33, 16, 7);



draw_set_font(fnt_main);
if (selected)
{
draw_sprite_ext(spr_marker,-1,x,y,1,1,image_angle,c_white,1);

//draw_health
draw_healthbar(x-24,y-32,x+24,y-24,my_health,c_red,c_red,c_green,0,1,1);
//draw_hunger
draw_healthbar(x-24,y-46,x+24,y-38,my_hunger,c_aqua,c_aqua,c_blue,0,1,1);
//draw_name
draw_set_color(make_colour_rgb(153, 60, 4));
draw_set_font(fnt_small);
draw_text_outline(x,y-58,"Stufe "+string(level),1,outline_col,8);
draw_text(x,y-58,"Stufe "+string(level));

switch(my_feeling)
{
case 0:
draw_set_color(make_colour_rgb(17, 78, 14));
break;

case 1:
draw_set_color(make_colour_rgb(165, 31, 31));
break;

case 2:
draw_set_color(make_colour_rgb(138, 49, 45));
break;
}
draw_set_font(fnt_main);

draw_text_outline(x,y-76,string(my_name),1,outline_col,8);

draw_text(x,y-76,string(my_name));


if my_sex == 0
{draw_sprite(spr_female,0,x,y-94);}
else {draw_sprite(spr_male,0,x,y-94);}

if my_parents!=""
{
draw_set_color(make_colour_rgb(153, 60, 4));
draw_set_font(fnt_small);

draw_text_outline(x,y-110,my_parents,1,outline_col,8);

draw_text(x,y-110,my_parents);

}

}

//draw_text(x,y,escape);
draw_set_halign(fa_center);
draw_set_valign(fa_center);
draw_set_font(fnt_small);
draw_set_color(make_colour_rgb(153, 60, 4));
if wild_level&gt;0
{

draw_text_outline(x,y+24,"Wildnis: "+string(wild_level),1,outline_col,8);

draw_text(x,y+24,"Wildnis: "+string(wild_level));
}

draw_text(x,y+60,social_timer);
draw_text(x,y+92,act);
draw_text(x,y+128,option);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
