<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_buy_field</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-276447231</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*to_buy="";
to_sell="";
cell=32;
quantity=1;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*x=view_xview[0]+(view_wview[0]/2)-(sprite_width/2);
y=view_yview[0]+(view_hview[0]/2)-(sprite_height/2);


cell_1 = (mouse_x &gt; x+64) &amp;&amp; (mouse_x &lt; x+96) &amp;&amp; (mouse_y &gt; y+96) &amp;&amp; (mouse_y &lt; y+128);
cell_2 = (mouse_x &gt; x+96) &amp;&amp; (mouse_x &lt; x+128) &amp;&amp; (mouse_y &gt; y+96) &amp;&amp; (mouse_y &lt; y+128);
cell_3 = (mouse_x &gt; x+128) &amp;&amp; (mouse_x &lt; x+160) &amp;&amp; (mouse_y &gt; y+96) &amp;&amp; (mouse_y &lt; y+128);
cell_4 = (mouse_x &gt; x+160) &amp;&amp; (mouse_x &lt; x+192) &amp;&amp; (mouse_y &gt; y+96) &amp;&amp; (mouse_y &lt; y+128);
cell_5 = (mouse_x &gt; x+192) &amp;&amp; (mouse_x &lt; x+224) &amp;&amp; (mouse_y &gt; y+96) &amp;&amp; (mouse_y &lt; y+128);
cell_6 = (mouse_x &gt; x+224) &amp;&amp; (mouse_x &lt; x+256) &amp;&amp; (mouse_y &gt; y+96) &amp;&amp; (mouse_y &lt; y+128);

cell_item_1 = (mouse_x &gt; x+64) &amp;&amp; (mouse_x &lt; x+96) &amp;&amp; (mouse_y &gt; y+288) &amp;&amp; (mouse_y &lt; y+288+32);

cell_x1   = (mouse_x &gt; x+577) &amp;&amp; (mouse_x &lt; x+577+32) &amp;&amp; (mouse_y &gt; y+449) &amp;&amp; (mouse_y &lt; y+449+32);
cell_x10  = (mouse_x &gt; x+609) &amp;&amp; (mouse_x &lt; x+609+32) &amp;&amp; (mouse_y &gt; y+449) &amp;&amp; (mouse_y &lt; y+449+32);
cell_x100 = (mouse_x &gt; x+641) &amp;&amp; (mouse_x &lt; x+641+32) &amp;&amp; (mouse_y &gt; y+449) &amp;&amp; (mouse_y &lt; y+449+32);

accept_button =  (mouse_x &gt; x+575) &amp;&amp; (mouse_x &lt; x+670) &amp;&amp; (mouse_y &gt; y+416) &amp;&amp; (mouse_y &lt; y+448);




//clickables

//items
if cell_1 &amp;&amp; mouse_check_button_pressed(mb_left)
{
to_buy="bush";
}
else 
if cell_2 &amp;&amp; mouse_check_button_pressed(mb_left)
{
to_buy="fence";
}
else 
if cell_3 &amp;&amp; mouse_check_button_pressed(mb_left)
{
to_buy="toilet";
}
else 
if cell_4 &amp;&amp; mouse_check_button_pressed(mb_left)
{
to_buy="machine";
}
else
if cell_5 &amp;&amp; mouse_check_button_pressed(mb_left)
{
to_buy="gate";
}
else
if cell_6 &amp;&amp; mouse_check_button_pressed(mb_left)
{
to_buy="autogate";
}
else 
if cell_item_1 &amp;&amp; mouse_check_button_pressed(mb_left)
{
to_buy="food";
}


//quantity
if cell_x1 &amp;&amp; mouse_check_button_pressed(mb_left)
{
quantity=1;
}
else 
if cell_x10 &amp;&amp; mouse_check_button_pressed(mb_left)
{
quantity=10;
}
else 
if cell_x100 &amp;&amp; mouse_check_button_pressed(mb_left)
{
quantity=100;
}



//accepting buy
if (accept_button) &amp;&amp; (mouse_check_button_pressed(mb_left))
{

switch(to_buy)
{
case "bush":
    
if global.player_gold &gt;= (global.price[0]*quantity)
{
global.player_gold-=(global.price[0]*quantity);
global.bush+=quantity;
}
else
{
//can't afford
}

    break;

case "fence":

if global.player_gold &gt;= (global.price[1]*quantity)
{
global.player_gold-=global.price[1]*quantity;
global.wood+=quantity;
}
else
{
//can't afford
}
  
    break;
    
case "toilet":

if global.player_gold &gt;= (global.price[2]*quantity)
{
global.player_gold-=global.price[2]*quantity;
global.toilet+=quantity;
}
else
{
//can't afford
}
  
    break;
    
case "machine":

if global.player_gold &gt;= (global.price[3]*quantity)
{
global.player_gold-=global.price[3]*quantity;
global.machine+=quantity;
}
else
{
//can't afford
}
  
    break;

case "gate":

if global.player_gold &gt;= (global.price[5]*quantity)
{
global.player_gold-=global.price[5]*quantity;
global.gate+=quantity;
}
else
{
//can't afford
}
  
    break;
    
case "autogate":

if global.player_gold &gt;= (global.price[6]*quantity)
{
global.player_gold-=global.price[6]*quantity;
global.autogate+=quantity;
}
else
{
//can't afford
}
  
    break;
    
case "food":

if global.player_gold &gt;= (global.price[4]*quantity)
{
global.player_gold-=global.price[4]*quantity;
global.food+=quantity;
}
else
{
//can't afford
}
  
    break;    
}

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*draw_set_font(fnt_main);
draw_set_halign(fa_center);
draw_set_valign(fa_center);
draw_set_colour(c_white);


draw_self();

//draw purchasable items
draw_set_font(fnt_small);
draw_set_halign(fa_center);
draw_set_color(c_white);

draw_sprite(spr_bush ,0,x+64,y+96);
draw_text_outline(x+64+8,y+96+8,global.bush,1,c_black,8);
draw_text(x+64+8,y+96+8,global.bush);

draw_sprite(spr_fence,0,x+96,y+96);
draw_text_outline(x+96+8,y+96+8,global.wood,1,c_black,8);
draw_text(x+96+8,y+96+8,global.wood);

draw_sprite(spr_toilet,0,x+128,y+96);
draw_text_outline(x+128+8,y+96+8,global.toilet,1,c_black,8);
draw_text(x+128+8,y+96+8,global.toilet);

draw_sprite_ext(spr_machine,0,x+160,y+128,0.5,0.5,90,c_white,1);
draw_text_outline(x+160+8,y+96+8,global.machine,1,c_black,8);
draw_text(x+160+8,y+96+8,global.machine);

draw_sprite(spr_gate,0,x+192,y+96);
draw_text_outline(x+192+8,y+96+8,global.gate,1,c_black,8);
draw_text(x+192+8,y+96+8,global.gate);

draw_sprite(spr_auto_gate,0,x+224,y+96);
draw_text_outline(x+224+8,y+96+8,global.autogate,1,c_black,8);
draw_text(x+224+8,y+96+8,global.autogate);

//items
draw_sprite(spr_food,0,x+64,y+cell*9);
draw_text_outline(x+64+8,y+(cell*9)+8,global.food,1,c_black,8);
draw_text(x+64+8,y+(cell*9)+8,global.food);



draw_set_font(fnt_main);

//drawing choice and description
offset1=190;
col1 = make_colour_rgb(255, 135, 0);
switch(to_buy)
{
    //bush
case "bush":
draw_sprite(spr_bush,0,x+576,y+368);
//drawing text color red or green
if global.player_gold&gt;=global.price[0]*quantity

{draw_set_color(make_colour_rgb(44, 195, 10));}
else
{draw_set_color(make_colour_rgb(206, 43, 27));}

draw_text(x+656,y+384,"$"+string(global.price[0]*quantity));
draw_set_color(c_white);

//draw description
draw_set_font(fnt_main);
draw_set_color(col1);
draw_text(x+624,y+offset1,"Hecke");
draw_set_color(c_white);
draw_set_font(fnt_small);
draw_text(x+624,y+270,"Hecken sind nicht nur#eine Zierde für deine# Farm, sondern im#Gegensatz zu Holzzäunen#unzerstörbar.")
draw_set_font(fnt_main);
break;

    //fence
case "fence":
draw_sprite(spr_fence,0,x+576,y+368);
//drawing text color red or green
if global.player_gold&gt;=global.price[1]*quantity

{draw_set_color(make_colour_rgb(44, 195, 10));}
else
{draw_set_color(make_colour_rgb(206, 43, 27));}

draw_text(x+656,y+384,"$"+string(global.price[1]*quantity));
draw_set_color(c_white);
//draw description
draw_set_font(fnt_main);
draw_set_color(col1);
draw_text(x+624,y+offset1,"Holzzaun");
draw_set_color(c_white);
draw_set_font(fnt_small);
draw_text(x+624,y+270,"Holzzäune sind ein günstiges#und ansehnliches Mittel um#zum Beispiel Gehege zu#errichten. Allerdings können sie#unter bestimmten Umständen#zerstört werden.")
draw_set_font(fnt_main);
break;

    //toilet
case "toilet":
draw_sprite(spr_toilet,0,x+576,y+368);
//drawing text color red or green
if global.player_gold&gt;=global.price[2]*quantity

{draw_set_color(make_colour_rgb(44, 195, 10));}
else
{draw_set_color(make_colour_rgb(206, 43, 27));}

draw_text(x+656,y+384,"$"+string(global.price[2]*quantity));
draw_set_color(c_white);
//draw description
draw_set_font(fnt_main);
draw_set_color(col1);
draw_text(x+624,y+offset1,"Toilette");
draw_set_font(fnt_small);
draw_set_color(c_white);
draw_text(x+624,y+270,"Die Toilette erleichtert es#dir deine Monster gesund#und deine farm sauberer#zu halten.")
draw_set_font(fnt_main);
break;

    //machine
case "machine":
draw_sprite_ext(spr_machine,0,x+576,y+400,0.5,0.5,90,c_white,1);
//drawing text color red or green
if global.player_gold&gt;=global.price[3]*quantity

{draw_set_color(make_colour_rgb(44, 195, 10));}
else
{draw_set_color(make_colour_rgb(206, 43, 27));}

draw_text(x+656,y+384,"$"+string(global.price[3]*quantity));
draw_set_color(c_white);
//draw description
draw_set_font(fnt_main);
draw_set_color(col1);
draw_text(x+624,y+offset1,"Maschine");
draw_set_font(fnt_small);
draw_set_color(c_white);
draw_text(x+624,y+270,"Die Maschine wird sich#immer wieder als nützlich#erweisen. Wie, musst du#jedoch selbst herausfinden.")
draw_set_font(fnt_main);
break;

    //gate
case "gate":
draw_sprite(spr_gate,0,x+576,y+368);
//drawing text color red or green
if global.player_gold&gt;=global.price[5]*quantity

{draw_set_color(make_colour_rgb(44, 195, 10));}
else
{draw_set_color(make_colour_rgb(206, 43, 27));}

draw_text(x+656,y+384,"$"+string(global.price[5]*quantity));
draw_set_color(c_white);
//draw description
draw_set_font(fnt_main);
draw_set_color(col1);
draw_text(x+624,y+offset1,"Tor");
draw_set_font(fnt_small);
draw_set_color(c_white);
draw_text(x+624,y+270,"Ein einfaches und stabiles#Tor, welches mit einem#Mausclick auf oder zu#gemacht werden kann.")
draw_set_font(fnt_main);
break;

    //autogate
case "autogate":
draw_sprite(spr_auto_gate,0,x+576,y+368);
//drawing text color red or green
if global.player_gold&gt;=global.price[6]*quantity

{draw_set_color(make_colour_rgb(44, 195, 10));}
else
{draw_set_color(make_colour_rgb(206, 43, 27));}

draw_text(x+656,y+384,"$"+string(global.price[6]*quantity));
draw_set_color(c_white);
//draw description
draw_set_font(fnt_main);
draw_set_color(col1);
draw_text(x+624,y+offset1,"Automatik-Tor");
draw_set_font(fnt_small);
draw_set_color(c_white);
draw_text(x+624,y+270,"Dieses Tor schließt sich#im geöffneten Zustand#automatisch, wenn ein#Monster es überschreitet.")
draw_set_font(fnt_main);
break;

    //food
case "food":
draw_sprite(spr_food,0,x+576,y+368);
//drawing text color red or green
if global.player_gold&gt;=global.price[4]*quantity

{draw_set_color(make_colour_rgb(44, 195, 10));}
else
{draw_set_color(make_colour_rgb(206, 43, 27));}

draw_text(x+656,y+384,"$"+string(global.price[4]*quantity));
draw_set_color(c_white);
//draw description
draw_set_font(fnt_main);
draw_set_color(col1);
draw_text(x+624,y+offset1,"Futter");
draw_set_font(fnt_small);
draw_set_color(c_white);
draw_text(x+624,y+270,"Das Hauptfutter für Monster.")
draw_set_font(fnt_main);
break;

}

draw_set_color(make_colour_rgb(210, 138, 40));
draw_text(x+624,y+432,"KAUFEN");
draw_set_color(c_white);
draw_set_halign(fa_left);
draw_text(x+624,y+128,"$"+string(global.player_gold));
draw_set_halign(fa_center);



//draw marky
switch(quantity)
{
case 1:
draw_sprite(spr_marky,0,x+577,y+449);
break;

case 10:
draw_sprite(spr_marky,0,x+609,y+449);
break;

case 100:
draw_sprite(spr_marky,0,x+641,y+449);
break;
}

//draw quantities
draw_set_font(fnt_xsmall);
draw_set_color(c_white);
draw_set_halign(fa_center);
draw_set_valign(fa_center);
draw_text(x+577+16,y+449+16,"x1");
draw_text(x+609+16,y+449+16,"x10");
draw_text(x+641+16,y+449+16,"x100");


draw_sprite(spr_cursor,0,mouse_x,mouse_y);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
